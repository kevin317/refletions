What happens when you initialize a repository? Why do you need to do it?

there is a .git. so i can have version control.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

Stores information about what will go into your next commit; offers a intermediate ground between other two.

How can you use the staging area to make sure you have one commit per logical
change?

git diff to see the difference between working directory and staging area

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

creating different versions of app. Branches allow me to change a version without touching the master.

How do the diagrams help you visualize the branch structure?

I can tell which commit is from which branch, and where i made changes.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

It will has the features of bothe branches. Because we can see the changes.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually

automatic is easier and coveneint, and manual is accurate and troublesome.

git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.
